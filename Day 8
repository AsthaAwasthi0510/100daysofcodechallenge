TOPIC: ARRAY
Question: Search Insert Position
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

Test Case 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Test Case 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Test Case 3:
Input: nums = [1,3,5,6], target = 7
Output: 4

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104

Explaination:
By looking at the sample output and input, you will notice that the index is returned as it is if the target is found in the given array. 
If the target is greater than the last element, it will be inserted at the last position after the last element.
Also, if you find the target lies between two nos present in the array then the target will be inserted between them only.

Solution:

class Solution {
   public int searchInsert(int[] nums, int target) {

    for(int i=0; i< nums.length; i++)
    {
        if(nums[i] >= target)
            return i;
        
    }
    return nums.length;
    
}
}
