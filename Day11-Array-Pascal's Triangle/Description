Topic: Array
Sub Topic: Pascal's Triangle

One of the most interesting Number Patterns is Pascal's Triangle (named after Blaise Pascal, a famous French Mathematician and Philosopher).
To build the triangle, start with "1" at the top, then continue placing numbers below it in a triangular pattern.
Each number is the numbers directly above it added together.

Patterns Within the Triangle
***Diagonals***
- The first diagonal is, of course, just "1"s
- The next diagonal has the Counting Numbers (1,2,3, etc).
- The third diagonal has the triangular numbers

***Symmetrical***
The triangle is also symmetrical. The numbers on the left side have identical matching numbers on the right side, like a mirror image.

***Horizontal Sums***
What do you notice about the horizontal sums?
Is there a pattern?
They double each time (powers of 2).

***test cases***
Test Case 1:
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

Test Case 2:
Input: numRows = 1
Output: [[1]]

***Constraints***
1 <= numRows <= 30

Explaination:
Step – I: Initialized an array of size numRows, array = [[],[],[],[],[]]
Step – II: Run a loop from i = 0 to numRows – 1

At i = 0:
> We resize the first row of the array to (i + 1) = (0 + 1) = 1, so array = [[0],[],[],[],[]].
> Set the first and last value of array[i] = 1, so, array[0][0] = 1 and array[0][i] = 1. Therefore, array = [[1],[],[],[],[]]
> Since, i = 0, the nested for loop does not satisfy the running criteria and hence does not get executed.

At i = 1:

> We resize the second row of the array to (i + 1) = (1 + 1) = 2, so array = [[1],[0,0],[],[],[]].
> Set the first and last value of array[i] = 1, so, array[1][0] = 1 and array[1][i] = 1. Therefore, array = [[1],[1,1],[],[],[]]
> Since, i = 1, the nested for loop does not satisfy the running criteria and hence does not get executed.

At i = 2:

> We resize the third row of the array to (i + 1) = (2 + 1) = 3, so array = [[1],[1,1],[0,0,0],[],[]].
> Set the first and last value of array[i] = 1, so, array[2][0] = 1 and array[2][i] = 1. Therefore, array = [[1],[1,1],[1,0,1],[],[]]
> Run a loop from j = 1 to i – 1:

> At j = 1:
array[i][j] = array[i – 1][j – 1] + array[i – 1][j]  = array[1][0] + array[1][1] = 1 + 1 = 2

So, array = [[1],[1,1],[1,2,1],[],[]]

At i = 3 and i = 4, we follow the same approach to fill the two rows of the array and get array = [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]].
Step – III: Return array.

