TOPIC: ARRAY
PROBLEM: REMOVING DUPLICATES FROM SORTED ARRAY

Question: Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once.
The relative order of the elements should be kept the same.

TEST CASES:
TEST CASE 1: INPUT:nums = [1,1,2]
             OUTPUT:2, nums = [1,2,_]
             EXPLAINATION: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
                           It does not matter what you leave beyond the returned k (hence they are underscores).
TEST CASE 2: INPUT: nums = [0,0,1,1,1,2,2,3,3,4]
             OUTPUT: 5, nums = [0,1,2,3,4,_,_,_,_,_]
             EXPLAINATION: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
                           It does not matter what you leave beyond the returned k (hence they are underscores).
CONSTRAINTS: 1 <= nums.length <= 3 * 104
             -100 <= nums[i] <= 100
             nums is sorted in non-decreasing order.
             
Solution:
         class Solution {
      public int removeDuplicates(int[] nums) {
        int pointer = 0; 
        for (int i = 0; i < nums.length - 1 ; i++){
            if (nums[i] < nums[i+1]){               
                pointer++;
                nums[pointer] = nums[i+1];}
            else{continue;}
        }
        pointer++;
        return pointer;
    }
}
